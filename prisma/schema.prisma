datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  customerId       String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  availableCredits Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts              Account[]
  sessions              Session[]
  videos                Video[]
  creditPurchaseHistory CreditPurchaseHistory[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model CreditPurchaseHistory {
  id        BigInt   @id @default(autoincrement())
  userId    String
  priceId   String
  credits   Int
  price     Decimal  @db.Decimal(12, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Video {
  id                BigInt      @id @default(autoincrement())
  userId            String
  fileName          String
  fileExtension     String
  creditsCharged    Int
  numOfClips        Int?
  requestedDuration Int?
  totalSeconds      Int
  sizeInMB          Decimal     @db.Decimal(7, 2)
  s3FolderName      String
  s3Key             String
  s3Location        String
  status            VideoStatus @default(CREATED)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  clips Clip[]

  user User @relation(fields: [userId], references: [id])
}

model Clip {
  id            BigInt   @id @default(autoincrement())
  videoId       BigInt
  fileName      String   @unique
  fileExtension String   @default(".mp4")
  duration      Int
  sizeInMB      Decimal  @db.Decimal(7, 2)
  s3FolderName  String
  s3Key         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  video Video @relation(fields: [videoId], references: [id])
}

// ////////////////////////////////////////////////////////////
// //                                                        //
// //                          ENUMS                         //
// //                                                        //
// ////////////////////////////////////////////////////////////

enum VideoStatus {
  CREATED
  CLIPS_UPLOADED
}
