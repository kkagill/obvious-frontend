generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String  @id @default(uuid())
  customerId       String?
  email            String
  availableCredits Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  records               Record[]
  creditPurchaseHistory CreditPurchaseHistory[]
}

model CreditPurchaseHistory {
  id        BigInt   @id @default(autoincrement())
  userId    String
  priceId   String
  credits   Int
  price     Decimal  @db.Decimal(12, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

model Record {
  id              BigInt       @id @default(autoincrement())
  userId          String
  role            String
  rentalAddress   String
  securityDeposit Int
  currency        String
  otherPartyEmail String
  creditsCharged  Int
  numImages       Int
  numVideos       Int?
  totalSeconds    Int?
  status          RecordStatus @default(PENDING)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  files File[]

  User User @relation(fields: [userId], references: [id])
}

model File {
  id            BigInt           @id @default(autoincrement())
  recordId      BigInt
  fileName      String
  fileExtension String
  s3Key         String
  s3Location    String
  ipfsHash      String?
  type          FileType         @default(IMAGE)
  uploadStatus  FileUploadStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  Record Record @relation(fields: [recordId], references: [id])
}

model Currency {
  id        BigInt   @id @default(autoincrement())
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model OpenCaseItemPriceUpdate {
//   id             String    @id @default(cuid())
//   marketHashName String
//   price          Decimal   @db.Decimal(12, 2)
//   createdAt      DateTime  @default(now())
//   updatedAt      DateTime? @updatedAt
// }

// ////////////////////////////////////////////////////////////
// //                                                        //
// //                          ENUMS                         //
// //                                                        //
// ////////////////////////////////////////////////////////////

enum RecordStatus {
  PENDING
  FAILED_VIDEO_UPLOAD
  UPLOADED_TO_S3
  UPLOADED_TO_IPFS
  UPLOADED_TO_EVM
}

enum FileUploadStatus {
  PENDING
  UPLOADED_TO_S3
  UPLOADED_TO_IPFS
}

enum FileType {
  IMAGE
  VIDEO
}
